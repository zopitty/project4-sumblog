// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// NextAuth Schemas
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String? @db.Text
  role          String? @default("user")
  email         String?   @unique
  password      String?
  age           Int?
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  follower      Follows[] @relation("follower")
  following     Follows[] @relation("following")

  writtenPosts    Post[] @relation("WrittenPosts")
  writtenComments Comment[] @relation("WrittenComments")
  likes           Likes[] @relation("UserLikes")
}

model Follows {
Follower        User @relation("follower", fields: [followerUserId], references:[id])
followerUserId  String
Following       User @relation("following", fields:[followingUserId], references:[id])
followingUserId String

@@id([followerUserId, followingUserId])
}

model Post {
  id            Int @id @default(autoincrement())
  title         String?
  content       String?
  likes         Likes[] @relation("PostLikes")

  author        User @relation("WrittenPosts", fields:[userId], references:[id])
  userId        String

  comments      Comment[] @relation("PostComments")

// to be removed
  heartCount    Int? @default(0) 
  createdAt     DateTime @default(now())
}

model Comment {
  id            Int @id @default(autoincrement())
  comment       String?

  author        User @relation("WrittenComments", fields:[userId], references:[id])
  userId        String

  post          Post @relation("PostComments", fields:[postId], references:[id])
  postId        Int

  createdAt     DateTime @default(now())

  children      Comment[] @relation("ParentChild")
  parent        Comment? @relation("ParentChild", fields: [parentId], references: [id])
  parentId      Int?
}

model Likes {
user          User @relation("UserLikes", fields:[userId], references:[id])
userId        String
post          Post @relation("PostLikes", fields: [postId], references: [id])
postId        Int

@@id([userId, postId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// need to run npm i @vercel/postgres if using postgres
// reminder: RUN --NPX PRISMA MIGRATE DEV-- AFTER UPDATE
// if new updates, follow instructions to update migrate